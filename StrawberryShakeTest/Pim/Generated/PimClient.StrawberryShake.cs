// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public static partial class PimClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::StrawberryShakeTest.Pim.State.PimClientStoreAccessor> AddPimClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::StrawberryShakeTest.Pim.State.PimClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeTest.Pim.GetShapesByTenantQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeTest.Pim.PimClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeTest.Pim.IPimClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::StrawberryShakeTest.Pim.State.PimClientStoreAccessor>("PimClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("PimClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeEntity, global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Shape>, global::StrawberryShakeTest.Pim.State.GetShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_ShapeComponent>, global::StrawberryShakeTest.Pim.State.GetShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent>, global::StrawberryShakeTest.Pim.State.GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent>, global::StrawberryShakeTest.Pim.State.GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent>, global::StrawberryShakeTest.Pim.State.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShakeTest.Pim.ComponentTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>, global::StrawberryShakeTest.Pim.State.GetShapesByTenantResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>, global::StrawberryShakeTest.Pim.State.GetShapesByTenantBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeTest.Pim.GetShapesByTenantQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeTest.Pim.GetShapesByTenantQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::StrawberryShakeTest.Pim.State.PimClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeTest.Pim.PimClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeTest.Pim.IPimClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeTest.Pim.PimClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace StrawberryShakeTest.Pim
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenantResult : global::System.IEquatable<GetShapesByTenantResult>, IGetShapesByTenantResult
    {
        public GetShapesByTenantResult(global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape shape)
        {
            Shape = shape;
        }

        public global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape Shape { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenantResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Shape.Equals(other.Shape));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenantResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Shape.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_ShapeQueries : global::System.IEquatable<GetShapesByTenant_Shape_ShapeQueries>, IGetShapesByTenant_Shape_ShapeQueries
    {
        public GetShapesByTenant_Shape_ShapeQueries(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany>? getMany)
        {
            GetMany = getMany;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany>? GetMany { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_ShapeQueries? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(GetMany, other.GetMany));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_ShapeQueries)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GetMany != null)
                {
                    foreach (var GetMany_elm in GetMany)
                    {
                        hash ^= 397 * GetMany_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Shape : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Shape>, IGetShapesByTenant_Shape_GetMany_Shape
    {
        public GetShapesByTenant_Shape_GetMany_Shape(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>? components, global::System.String identifier, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>? variantComponents)
        {
            Components = components;
            Identifier = identifier;
            VariantComponents = variantComponents;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>? Components { get; }

        public global::System.String Identifier { get; }

        /// <summary>
        /// **EXPERIMENTAL:** Watch out! This feature is still in testing process.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>? VariantComponents { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Shape? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Components, other.Components)) && Identifier.Equals(other.Identifier) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(VariantComponents, other.VariantComponents);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Shape)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Components != null)
                {
                    foreach (var Components_elm in Components)
                    {
                        hash ^= 397 * Components_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Identifier.GetHashCode();
                if (VariantComponents != null)
                {
                    foreach (var VariantComponents_elm in VariantComponents)
                    {
                        hash ^= 397 * VariantComponents_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_ShapeComponent : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_ShapeComponent>, IGetShapesByTenant_Shape_GetMany_Components_ShapeComponent
    {
        public GetShapesByTenant_Shape_GetMany_Components_ShapeComponent(global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config? config, global::System.String id, global::StrawberryShakeTest.Pim.ComponentType type)
        {
            Config = config;
            Id = id;
            Type = type;
        }

        public global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config? Config { get; }

        public global::System.String Id { get; }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_ShapeComponent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Config is null && other.Config is null) || Config != null && Config.Equals(other.Config))) && Id.Equals(other.Id) && Type.Equals(other.Type);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_ShapeComponent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Config != null)
                {
                    hash ^= 397 * Config.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent>, IGetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent(global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? config, global::System.String id, global::StrawberryShakeTest.Pim.ComponentType type)
        {
            Config = config;
            Id = id;
            Type = type;
        }

        public global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? Config { get; }

        public global::System.String Id { get; }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Config is null && other.Config is null) || Config != null && Config.Equals(other.Config))) && Id.Equals(other.Id) && Type.Equals(other.Type);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Config != null)
                {
                    hash ^= 397 * Config.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components> components)
        {
            Components = components;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components> Components { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Components, other.Components));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Components_elm in Components)
                {
                    hash ^= 397 * Components_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig>, IGetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components> components)
        {
            Components = components;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components> Components { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Components, other.Components));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Components_elm in Components)
                {
                    hash ^= 397 * Components_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig()
        {
        }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent>, IGetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent
    {
        public GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent(global::StrawberryShakeTest.Pim.ComponentType type, global::System.String id)
        {
            Type = type;
            Id = id;
        }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }

        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Type.Equals(other.Type)) && Id.Equals(other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Type.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent : global::System.IEquatable<GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent>, IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent
    {
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent(global::StrawberryShakeTest.Pim.ComponentType type, global::System.String id)
        {
            Type = type;
            Id = id;
        }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }

        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Type.Equals(other.Type)) && Id.Equals(other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Type.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenantResult
    {
        public global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape Shape { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany>? GetMany { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_ShapeQueries : IGetShapesByTenant_Shape
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>? Components { get; }

        public global::System.String Identifier { get; }

        /// <summary>
        /// **EXPERIMENTAL:** Watch out! This feature is still in testing process.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>? VariantComponents { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Shape : IGetShapesByTenant_Shape_GetMany
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components
    {
        public global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config? Config { get; }

        public global::System.String Id { get; }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_ShapeComponent : IGetShapesByTenant_Shape_GetMany_Components
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents
    {
        public global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? Config { get; }

        public global::System.String Id { get; }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent : IGetShapesByTenant_Shape_GetMany_VariantComponents
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components> Components { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig : IGetShapesByTenant_Shape_GetMany_Components_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components> Components { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_Components
    {
        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }

        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent : IGetShapesByTenant_Shape_GetMany_Components_Config_Components
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components
    {
        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }

        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent : IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public enum ComponentType
    {
        Boolean,
        Componentchoice,
        Contentchunk,
        Datetime,
        Files,
        Gridrelations,
        Images,
        Itemrelations,
        Location,
        Numeric,
        Paragraphcollection,
        Propertiestable,
        Richtext,
        Selection,
        Singleline,
        Videos
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ComponentTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ComponentType>
    {
        public global::System.String TypeName => "ComponentType";
        public ComponentType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "boolean" => ComponentType.Boolean,
                "componentChoice" => ComponentType.Componentchoice,
                "contentChunk" => ComponentType.Contentchunk,
                "datetime" => ComponentType.Datetime,
                "files" => ComponentType.Files,
                "gridRelations" => ComponentType.Gridrelations,
                "images" => ComponentType.Images,
                "itemRelations" => ComponentType.Itemrelations,
                "location" => ComponentType.Location,
                "numeric" => ComponentType.Numeric,
                "paragraphCollection" => ComponentType.Paragraphcollection,
                "propertiesTable" => ComponentType.Propertiestable,
                "richText" => ComponentType.Richtext,
                "selection" => ComponentType.Selection,
                "singleLine" => ComponentType.Singleline,
                "videos" => ComponentType.Videos,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ComponentType.Boolean => "boolean",
                ComponentType.Componentchoice => "componentChoice",
                ComponentType.Contentchunk => "contentChunk",
                ComponentType.Datetime => "datetime",
                ComponentType.Files => "files",
                ComponentType.Gridrelations => "gridRelations",
                ComponentType.Images => "images",
                ComponentType.Itemrelations => "itemRelations",
                ComponentType.Location => "location",
                ComponentType.Numeric => "numeric",
                ComponentType.Paragraphcollection => "paragraphCollection",
                ComponentType.Propertiestable => "propertiesTable",
                ComponentType.Richtext => "richText",
                ComponentType.Selection => "selection",
                ComponentType.Singleline => "singleLine",
                ComponentType.Videos => "videos",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetShapesByTenant GraphQL operation
    /// <code>
    /// query GetShapesByTenant($tenantId: ID!) {
    ///   shape {
    ///     __typename
    ///     getMany(tenantId: $tenantId) {
    ///       __typename
    ///       components {
    ///         __typename
    ///         config {
    ///           __typename
    ///           ... on ContentChunkComponentConfig {
    ///             components {
    ///               __typename
    ///               type
    ///               id
    ///               ... on ShapeComponent {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///         }
    ///         id
    ///         type
    ///         ... on ShapeComponent {
    ///           id
    ///         }
    ///       }
    ///       identifier
    ///       variantComponents {
    ///         __typename
    ///         config {
    ///           __typename
    ///           ... on ContentChunkComponentConfig {
    ///             components {
    ///               __typename
    ///               type
    ///               id
    ///               ... on ShapeComponent {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///         }
    ///         id
    ///         type
    ///         ... on ShapeComponent {
    ///           id
    ///         }
    ///       }
    ///       ... on Shape {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenantQueryDocument : global::StrawberryShake.IDocument
    {
        private GetShapesByTenantQueryDocument()
        {
        }

        public static GetShapesByTenantQueryDocument Instance { get; } = new GetShapesByTenantQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x42, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x28, 0x24, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x68, 0x61, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x28, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x68, 0x61, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4807f6c1f8284f784109e989e2f15de5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetShapesByTenant GraphQL operation
    /// <code>
    /// query GetShapesByTenant($tenantId: ID!) {
    ///   shape {
    ///     __typename
    ///     getMany(tenantId: $tenantId) {
    ///       __typename
    ///       components {
    ///         __typename
    ///         config {
    ///           __typename
    ///           ... on ContentChunkComponentConfig {
    ///             components {
    ///               __typename
    ///               type
    ///               id
    ///               ... on ShapeComponent {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///         }
    ///         id
    ///         type
    ///         ... on ShapeComponent {
    ///           id
    ///         }
    ///       }
    ///       identifier
    ///       variantComponents {
    ///         __typename
    ///         config {
    ///           __typename
    ///           ... on ContentChunkComponentConfig {
    ///             components {
    ///               __typename
    ///               type
    ///               id
    ///               ... on ShapeComponent {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///         }
    ///         id
    ///         type
    ///         ... on ShapeComponent {
    ///           id
    ///         }
    ///       }
    ///       ... on Shape {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenantQuery : global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetShapesByTenantResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetShapesByTenantQuery(global::StrawberryShake.IOperationExecutor<IGetShapesByTenantResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetShapesByTenantResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetShapesByTenantResult>> ExecuteAsync(global::System.String tenantId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(tenantId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetShapesByTenantResult>> Watch(global::System.String tenantId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(tenantId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String tenantId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("tenantId", FormatTenantId(tenantId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetShapesByTenantQueryDocument.Instance.Hash.Value, name: "GetShapesByTenant", document: GetShapesByTenantQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTenantId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetShapesByTenant GraphQL operation
    /// <code>
    /// query GetShapesByTenant($tenantId: ID!) {
    ///   shape {
    ///     __typename
    ///     getMany(tenantId: $tenantId) {
    ///       __typename
    ///       components {
    ///         __typename
    ///         config {
    ///           __typename
    ///           ... on ContentChunkComponentConfig {
    ///             components {
    ///               __typename
    ///               type
    ///               id
    ///               ... on ShapeComponent {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///         }
    ///         id
    ///         type
    ///         ... on ShapeComponent {
    ///           id
    ///         }
    ///       }
    ///       identifier
    ///       variantComponents {
    ///         __typename
    ///         config {
    ///           __typename
    ///           ... on ContentChunkComponentConfig {
    ///             components {
    ///               __typename
    ///               type
    ///               id
    ///               ... on ShapeComponent {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///         }
    ///         id
    ///         type
    ///         ... on ShapeComponent {
    ///           id
    ///         }
    ///       }
    ///       ... on Shape {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGetShapesByTenantQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetShapesByTenantResult>> ExecuteAsync(global::System.String tenantId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetShapesByTenantResult>> Watch(global::System.String tenantId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the PimClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class PimClient : global::StrawberryShakeTest.Pim.IPimClient
    {
        private readonly global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery _getShapesByTenant;
        public PimClient(global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery getShapesByTenant)
        {
            _getShapesByTenant = getShapesByTenant ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant));
        }

        public static global::System.String ClientName => "PimClient";
        public global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery GetShapesByTenant => _getShapesByTenant;
    }

    /// <summary>
    /// Represents the PimClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IPimClient
    {
        global::StrawberryShakeTest.Pim.IGetShapesByTenantQuery GetShapesByTenant { get; }
    }
}

namespace StrawberryShakeTest.Pim.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ShapeEntity
    {
        public ShapeEntity(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? components = default !, global::System.String identifier = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? variantComponents = default !)
        {
            Components = components;
            Identifier = identifier;
            VariantComponents = variantComponents;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Components { get; }

        public global::System.String Identifier { get; }

        ///<summary>**EXPERIMENTAL:** Watch out! This feature is still in testing process.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? VariantComponents { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ShapeComponentEntity
    {
        public ShapeComponentEntity(global::StrawberryShakeTest.Pim.State.IComponentConfigData? config = default !, global::System.String id = default !, global::StrawberryShakeTest.Pim.ComponentType type = default !)
        {
            Config = config;
            Id = id;
            Type = type;
        }

        public global::StrawberryShakeTest.Pim.State.IComponentConfigData? Config { get; }

        public global::System.String Id { get; }

        public global::StrawberryShakeTest.Pim.ComponentType Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenantResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeTest.Pim.GetShapesByTenantResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeEntity, GetShapesByTenant_Shape_GetMany_Shape> _getShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent> _getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper;
        public GetShapesByTenantResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeEntity, GetShapesByTenant_Shape_GetMany_Shape> getShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent> getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper = getShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper));
            _getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper));
            _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper));
            _getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper));
            _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryShakeTest.Pim.IGetShapesByTenantResult);
        public GetShapesByTenantResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetShapesByTenantResultInfo info)
            {
                return new GetShapesByTenantResult(MapNonNullableIGetShapesByTenant_Shape(info.Shape, snapshot));
            }

            throw new global::System.ArgumentException("GetShapesByTenantResultInfo expected.");
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape MapNonNullableIGetShapesByTenant_Shape(global::StrawberryShakeTest.Pim.State.ShapeQueriesData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetShapesByTenant_Shape returnValue = default !;
            if (data.__typename.Equals("ShapeQueries", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetShapesByTenant_Shape_ShapeQueries(MapIGetShapesByTenant_Shape_GetManyNonNullableArray(data.GetMany, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany>? MapIGetShapesByTenant_Shape_GetManyNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var shapes = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapes.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany(child, snapshot));
            }

            return shapes;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany MapNonNullableIGetShapesByTenant_Shape_GetMany(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Shape", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>? MapIGetShapesByTenant_Shape_GetMany_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config? MapIGetShapesByTenant_Shape_GetMany_Components_Config(global::StrawberryShakeTest.Pim.State.IComponentConfigData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetShapesByTenant_Shape_GetMany_Components_Config? returnValue;
            if (data is global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData componentChoiceComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData contentChunkComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsNonNullableArray(contentChunkComponentConfig.Components, snapshot));
            }
            else if (data is global::StrawberryShakeTest.Pim.State.FilesComponentConfigData filesComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData itemRelationsComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.NumericComponentConfigData numericComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData propertiesTableComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData selectionComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig();
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components> MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>? MapIGetShapesByTenant_Shape_GetMany_VariantComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? MapIGetShapesByTenant_Shape_GetMany_VariantComponents_Config(global::StrawberryShakeTest.Pim.State.IComponentConfigData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? returnValue;
            if (data is global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData componentChoiceComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData contentChunkComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsNonNullableArray(contentChunkComponentConfig.Components, snapshot));
            }
            else if (data is global::StrawberryShakeTest.Pim.State.FilesComponentConfigData filesComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData itemRelationsComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.NumericComponentConfigData numericComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData propertiesTableComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData selectionComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig();
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components> MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenantResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetShapesByTenantResultInfo(global::StrawberryShakeTest.Pim.State.ShapeQueriesData shape, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Shape = shape;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShakeTest.Pim.State.ShapeQueriesData Shape { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetShapesByTenantResultInfo(Shape, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeEntity, GetShapesByTenant_Shape_GetMany_Shape>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent> _getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper;
        public GetShapesByTenant_Shape_GetMany_ShapeFromShapeEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent> getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper));
            _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper));
            _getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper));
            _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper));
        }

        public GetShapesByTenant_Shape_GetMany_Shape Map(global::StrawberryShakeTest.Pim.State.ShapeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetShapesByTenant_Shape_GetMany_Shape(MapIGetShapesByTenant_Shape_GetMany_ComponentsNonNullableArray(entity.Components, snapshot), entity.Identifier, MapIGetShapesByTenant_Shape_GetMany_VariantComponentsNonNullableArray(entity.VariantComponents, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>? MapIGetShapesByTenant_Shape_GetMany_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config? MapIGetShapesByTenant_Shape_GetMany_Components_Config(global::StrawberryShakeTest.Pim.State.IComponentConfigData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetShapesByTenant_Shape_GetMany_Components_Config? returnValue;
            if (data is global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData componentChoiceComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData contentChunkComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsNonNullableArray(contentChunkComponentConfig.Components, snapshot));
            }
            else if (data is global::StrawberryShakeTest.Pim.State.FilesComponentConfigData filesComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData itemRelationsComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.NumericComponentConfigData numericComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData propertiesTableComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData selectionComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig();
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components> MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>? MapIGetShapesByTenant_Shape_GetMany_VariantComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? MapIGetShapesByTenant_Shape_GetMany_VariantComponents_Config(global::StrawberryShakeTest.Pim.State.IComponentConfigData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? returnValue;
            if (data is global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData componentChoiceComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData contentChunkComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsNonNullableArray(contentChunkComponentConfig.Components, snapshot));
            }
            else if (data is global::StrawberryShakeTest.Pim.State.FilesComponentConfigData filesComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData itemRelationsComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.NumericComponentConfigData numericComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData propertiesTableComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData selectionComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig();
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components> MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_ShapeComponent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper;
        public GetShapesByTenant_Shape_GetMany_Components_ShapeComponentFromShapeComponentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper));
        }

        public GetShapesByTenant_Shape_GetMany_Components_ShapeComponent Map(global::StrawberryShakeTest.Pim.State.ShapeComponentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetShapesByTenant_Shape_GetMany_Components_ShapeComponent(MapIGetShapesByTenant_Shape_GetMany_Components_Config(entity.Config, snapshot), entity.Id, entity.Type);
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config? MapIGetShapesByTenant_Shape_GetMany_Components_Config(global::StrawberryShakeTest.Pim.State.IComponentConfigData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetShapesByTenant_Shape_GetMany_Components_Config? returnValue;
            if (data is global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData componentChoiceComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ComponentChoiceComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData contentChunkComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ContentChunkComponentConfig(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsNonNullableArray(contentChunkComponentConfig.Components, snapshot));
            }
            else if (data is global::StrawberryShakeTest.Pim.State.FilesComponentConfigData filesComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_FilesComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData itemRelationsComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_ItemRelationsComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.NumericComponentConfigData numericComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_NumericComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData propertiesTableComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_PropertiesTableComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData selectionComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_Components_Config_SelectionComponentConfig();
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components> MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_Components_Config_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent> _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper;
        public GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponentFromShapeComponentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent> getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper = getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper));
        }

        public GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent Map(global::StrawberryShakeTest.Pim.State.ShapeComponentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetShapesByTenant_Shape_GetMany_VariantComponents_ShapeComponent(MapIGetShapesByTenant_Shape_GetMany_VariantComponents_Config(entity.Config, snapshot), entity.Id, entity.Type);
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? MapIGetShapesByTenant_Shape_GetMany_VariantComponents_Config(global::StrawberryShakeTest.Pim.State.IComponentConfigData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetShapesByTenant_Shape_GetMany_VariantComponents_Config? returnValue;
            if (data is global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData componentChoiceComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentChoiceComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData contentChunkComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ContentChunkComponentConfig(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsNonNullableArray(contentChunkComponentConfig.Components, snapshot));
            }
            else if (data is global::StrawberryShakeTest.Pim.State.FilesComponentConfigData filesComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_FilesComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData itemRelationsComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_ItemRelationsComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.NumericComponentConfigData numericComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_NumericComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData propertiesTableComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_PropertiesTableComponentConfig();
            }
            else if (data is global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData selectionComponentConfig)
            {
                returnValue = new global::StrawberryShakeTest.Pim.GetShapesByTenant_Shape_GetMany_VariantComponents_Config_SelectionComponentConfig();
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components> MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                shapeComponents.Add(MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components(child, snapshot));
            }

            return shapeComponents;
        }

        private global::StrawberryShakeTest.Pim.IGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components MapNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                return _getShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponentFromShapeComponentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent Map(global::StrawberryShakeTest.Pim.State.ShapeComponentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetShapesByTenant_Shape_GetMany_Components_Config_Components_ShapeComponent(entity.Type, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeTest.Pim.State.ShapeComponentEntity, GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponentFromShapeComponentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent Map(global::StrawberryShakeTest.Pim.State.ShapeComponentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetShapesByTenant_Shape_GetMany_VariantComponents_Config_Components_ShapeComponent(entity.Type, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GetShapesByTenantBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeTest.Pim.IGetShapesByTenantResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeTest.Pim.IGetShapesByTenantResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::StrawberryShakeTest.Pim.ComponentType> _componentTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetShapesByTenantBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeTest.Pim.IGetShapesByTenantResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _componentTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::StrawberryShakeTest.Pim.ComponentType>("ComponentType") ?? throw new global::System.ArgumentException("No serializer for type `ComponentType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetShapesByTenantResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetShapesByTenantResult Result, GetShapesByTenantResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetShapesByTenantResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetShapesByTenantResult, GetShapesByTenantResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShakeTest.Pim.State.ShapeQueriesData shapeId = default !;
            _entityStore.Update(session =>
            {
                shapeId = DeserializeNonNullableIGetShapesByTenant_Shape(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shape"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetShapesByTenantResultInfo(shapeId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShakeTest.Pim.State.ShapeQueriesData DeserializeNonNullableIGetShapesByTenant_Shape(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ShapeQueries", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.ShapeQueriesData(typename, getMany: UpdateIGetShapesByTenant_Shape_GetManyEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getMany"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetShapesByTenant_Shape_GetManyEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var shapes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                shapes.Add(UpdateNonNullableIGetShapesByTenant_Shape_GetManyEntity(session, child, entityIds));
            }

            return shapes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetShapesByTenant_Shape_GetManyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Shape", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeTest.Pim.State.ShapeEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeEntity(UpdateIGetShapesByTenant_Shape_GetMany_ComponentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "components"), entityIds), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "identifier")), UpdateIGetShapesByTenant_Shape_GetMany_VariantComponentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "variantComponents"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeEntity(UpdateIGetShapesByTenant_Shape_GetMany_ComponentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "components"), entityIds), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "identifier")), UpdateIGetShapesByTenant_Shape_GetMany_VariantComponentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "variantComponents"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetShapesByTenant_Shape_GetMany_ComponentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                shapeComponents.Add(UpdateNonNullableIGetShapesByTenant_Shape_GetMany_ComponentsEntity(session, child, entityIds));
            }

            return shapeComponents;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetShapesByTenant_Shape_GetMany_ComponentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeTest.Pim.State.ShapeComponentEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(DeserializeIComponentConfigData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "config"), entityIds), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(DeserializeIComponentConfigData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "config"), entityIds), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeTest.Pim.State.IComponentConfigData? DeserializeIComponentConfigData(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ComponentChoiceComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.ComponentChoiceComponentConfigData(typename);
            }

            if (typename?.Equals("ContentChunkComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.ContentChunkComponentConfigData(typename, components: UpdateNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "components"), entityIds));
            }

            if (typename?.Equals("FilesComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.FilesComponentConfigData(typename);
            }

            if (typename?.Equals("ItemRelationsComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.ItemRelationsComponentConfigData(typename);
            }

            if (typename?.Equals("NumericComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.NumericComponentConfigData(typename);
            }

            if (typename?.Equals("PropertiesTableComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.PropertiesTableComponentConfigData(typename);
            }

            if (typename?.Equals("SelectionComponentConfig", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::StrawberryShakeTest.Pim.State.SelectionComponentConfigData(typename);
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                shapeComponents.Add(UpdateNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsEntity(session, child, entityIds));
            }

            return shapeComponents;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetShapesByTenant_Shape_GetMany_Components_Config_ComponentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeTest.Pim.State.ShapeComponentEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(entity.Config, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(default !, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShakeTest.Pim.ComponentType DeserializeNonNullableComponentType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _componentTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetShapesByTenant_Shape_GetMany_VariantComponentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                shapeComponents.Add(UpdateNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponentsEntity(session, child, entityIds));
            }

            return shapeComponents;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeTest.Pim.State.ShapeComponentEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(DeserializeIComponentConfigData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "config"), entityIds), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(DeserializeIComponentConfigData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "config"), entityIds), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var shapeComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                shapeComponents.Add(UpdateNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsEntity(session, child, entityIds));
            }

            return shapeComponents;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetShapesByTenant_Shape_GetMany_VariantComponents_Config_ComponentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ShapeComponent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeTest.Pim.State.ShapeComponentEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(entity.Config, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeTest.Pim.State.ShapeComponentEntity(default !, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableComponentType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ShapeQueriesData
    {
        public ShapeQueriesData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? getMany = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GetMany = getMany;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? GetMany { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IComponentConfigData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ComponentChoiceComponentConfigData : IComponentConfigData
    {
        public ComponentChoiceComponentConfigData(global::System.String __typename)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
        }

        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ContentChunkComponentConfigData : IComponentConfigData
    {
        public ContentChunkComponentConfigData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? components = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Components = components;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Components { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class FilesComponentConfigData : IComponentConfigData
    {
        public FilesComponentConfigData(global::System.String __typename)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
        }

        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ItemRelationsComponentConfigData : IComponentConfigData
    {
        public ItemRelationsComponentConfigData(global::System.String __typename)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
        }

        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class NumericComponentConfigData : IComponentConfigData
    {
        public NumericComponentConfigData(global::System.String __typename)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
        }

        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class PropertiesTableComponentConfigData : IComponentConfigData
    {
        public PropertiesTableComponentConfigData(global::System.String __typename)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
        }

        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class SelectionComponentConfigData : IComponentConfigData
    {
        public SelectionComponentConfigData(global::System.String __typename)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
        }

        public global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class PimClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Shape" => ParseShapeEntityId(obj, __typename),
                "ShapeComponent" => ParseShapeComponentEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Shape" => FormatShapeEntityId(entityId),
                "ShapeComponent" => FormatShapeComponentEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseShapeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatShapeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseShapeComponentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatShapeComponentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class PimClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public PimClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
